 /***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Introduction
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @file      basic_serial.h
 * 
 * @version   1.0
 *
 * @date      12-02-2025
 *
 * @brief     Prototype of functions providing control, local settings, input, and output for serial ports on Linux, library developed for interacting with embedded systems in mind (non-cannonical).  
 *  
 * @author    Fábio D. Pacheco, 
 * @email     fabio.d.pacheco@inesctec.pt or pacheco.castro.fabio@gmail.com
 *
 * @copyright Copyright (c) [2025] [Fábio D. Pacheco]
 * 
 * @note      Manuals:
 *            https://man7.org/linux/man-pages/man2/TIOCMSET.2const.html , 
 *            https://people.na.infn.it/~garufi/didattica/CorsoAcq/SerialProgrammingInPosixOSs.pdf
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Definition file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifndef BASIC__SERIAL_H
#define BASIC__SERIAL_H

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Imported libraries
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#include <stdio.h>    
#include <stdlib.h>    
#include <string.h>  
#include <stdint.h>
#include <stdbool.h>
#include <stdarg.h>
#include <termios.h>
#include <fcntl.h>
#include <unistd.h>
#include <errno.h> 
#include <sys/ioctl.h>
#include <linux/limits.h>

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Enums
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

typedef enum{
  NONE     = 0,
  HARDWARE = 1,
  SOFTWARE = 2,
} flowControl_t;

typedef enum{
  ODD      = 1,
  EVEN     = 2,
} parity_t;

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Structs
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

typedef struct {
  bool     readonly:1;                                                         //!< If the file pointer will be given in read only mode, example NO = r+.
  uint8_t  flow:2;                                                             //!< The hardware flow control, example HARDWARE.
  uint8_t  parity:2;                                                           //!< The detection of error parity, example ODD.
  uint8_t  dataBits:4;                                                         //!< The number of bits per serial word, example 8.
  uint8_t  stopBits:1;                                                         //!< The number of stop bits per serial word, example 1.
  uint8_t  baudrate;                                                           //!< The baud rate of the communication in bits per second, example 9600.
  uint16_t timeout;                                                            //!< The time any read function will wait in deciseconds for the information to arrive, example 200.
  uint16_t minBytes;                                                           //!< The minimum number of bytes to necessary receive before returning the read function.
} serial_config_t;

typedef struct{
  int   fd;                                                                    //!< The file descriptor for the serial port opened.
  FILE *fp;                                                                    //!< The file pointer for the serial port opened.
} serial_pointer_t;

typedef struct{
  char             pathname[PATH_MAX];                                         //!< The path to the serial port, example "/dev/ttyUSB0"
  serial_pointer_t pointer;                                                    //!< The pointer to the serial file
  serial_config_t  config;                                                     //!< The serial port configuration
} serial_t;

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Prototypes
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

int8_t serial_open( const char *pathname, const serial_config_t * config, serial_t * serial );
int8_t serial_close( serial_t * serial );
int8_t serial_flush( serial_t * serial );
bool serial_check( serial_t * serial );

int8_t serial_default_config( serial_config_t * config );
int8_t serial_config_update( const serial_config_t * config, serial_t * serial );           

int8_t serial_config_change_parity( const uint8_t parity, struct termios * tty );
int8_t serial_config_change_stopbits( const uint8_t stopBits, struct termios * tty );
int8_t serial_config_change_databits( const uint8_t dataBits, struct termios * tty );
int8_t serial_config_change_flowcontrol( const uint8_t flowControl, struct termios * tty );
int8_t serial_config_change_extra( const uint16_t timeout, const uint16_t min, struct termios * tty );

int32_t serial_readLine( char * buf, const int32_t size, const int32_t offset, serial_t * serial );
int32_t serial_read( char * buf, const int32_t size, const int32_t offset, const int32_t length, serial_t * serial );
int32_t serial_printf( serial_t * serial, const char * format, ... );

int32_t serial_available( serial_t * serial );

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Definition file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * End of file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/